{% set env_dir = '{}/environments/{}'.format(install_prefix, env.name) %}

Name:           {{ rpm_prefix }}-taggedenv-{{ env.name }}
Version:        {{ env.version }}
Release:        0
Summary:        {{ env.summary }} 

License:        BSD 3
{% if env.url -%}
URL:            {{ env.url }}
{%- endif %}
BuildRoot:      %{_tmppath}/taggedenv-{{env.name}}-{{env.version}}

Requires: {{ rpm_prefix}}-installer
{% for pkg in pkgs -%}
Requires: {{ rpm_prefix }}-pkg-{{ pkg }}
{% endfor %}

%description

This is the {{ env.name }} {{rpm_prefix}} environment, described as:

    {{ env.summary|indent }}

Unlike normal RPMs, {{rpm_prefix}} environment RPMs create a software stack at
install time (i.e. they are not pre-built). This allows the environments to share
assets that otherwise wouldn't be sharable, thus making environments themselves very
lightweight.

{% if env.spec -%}
This environment has been generated with the following conda specification:

    {{ env.spec|indent }}
{%- endif %}

%prep
# Clear up any pre-existing build-root.
rm -rf $RPM_BUILD_ROOT/

%install
mkdir -p $RPM_BUILD_ROOT{{ env_dir }}


# Run *after* the RPM is installed or upgraded. (https://wiki.mageia.org/en/Packagers_RPM_tutorial#Pre-_and_Post-installation_scripts)
%post
  if [ $1 = 2 ]; then
    # Do stuff specific to upgrades
    echo "Removing: {{ env_dir }}";
  fi
  echo "Installing environment into: {{ env_dir }}";

  installer_python="{{ install_prefix }}/.pkgs/installer/python"
  install_script="{{ install_prefix }}/.pkgs/installer/install.py"

  export INSTALL="${installer_python} ${install_script} --pkgs-dir {{ install_prefix }}/.pkgs --prefix {{ env_dir }} --link"

  # Link all of the conda distributions that have been made available by the required RPMs.
  {% for pkg in pkgs -%}
  ${INSTALL} {{ pkg }}
  {% endfor %}


# Run *after* the RPM is upgraded or uninstalled (https://wiki.mageia.org/en/Packagers_RPM_tutorial#Pre-_and_Post-installation_scripts).
%postun
  if [ $1 = 0 ]; then
      # Do stuff specific to uninstalls
      echo "Removing: {{ env_dir }}";
      rm -rf {{ env_dir }}
  fi


# This phase just tidies up after itself.
%clean
rm -rf $RPM_BUILD_ROOT

%files
# All files in this directory are owned by this RPM.
%dir {{ env_dir }}
